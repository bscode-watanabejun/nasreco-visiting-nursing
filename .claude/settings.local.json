{
  "permissions": {
    "allow": [
      "Bash(psql:*)",
      "Bash(npx tsx:*)",
      "Bash(git commit:*)",
      "Bash(npm run check:*)",
      "Bash(git log:*)",
      "Bash(printf '\\n')",
      "Bash(npx drizzle-kit push:*)",
      "Bash(git add:*)",
      "Bash(git reset:*)",
      "Bash(DATABASE_URL=$DATABASE_URL npx drizzle-kit push)",
      "Bash(timeout:*)",
      "Bash(npm run:*)",
      "Bash(npx drizzle-kit migrate:*)",
      "Bash(npx drizzle-kit:*)",
      "Bash(printf \"No, add the constraint without truncating the table\\n\\n\\n\\n\\n\")",
      "Bash(if [ -n \"$DATABASE_URL\" ])",
      "Bash(then)",
      "Bash(else)",
      "Bash(exit 1)",
      "Bash(fi)",
      "WebFetch(domain:docs.replit.com)",
      "WebFetch(domain:blog.replit.com)",
      "WebSearch",
      "Bash(npm install:*)",
      "Bash(then npm run db:push)",
      "Bash(else echo \"DATABASE_URL not set\")",
      "Bash(node -e \"const bcrypt = require(''bcryptjs''); console.log(''Password hash for password123:'', bcrypt.hashSync(''password123'', 10));\")",
      "Bash(wc -l /home/runner/workspace/client/src/components/{CareManagerManagement,BuildingManagement,InsuranceCardManagement,MonthlyStatistics,CarePlanManagement,CareReportManagement,SpecialManagementSettings,BonusMasterManagement,HeadquartersDashboard,FacilityManagement}.tsx)",
      "Bash(for f in CareManagerManagement BuildingManagement InsuranceCardManagement MonthlyStatistics CarePlanManagement CareReportManagement SpecialManagementSettings BonusMasterManagement HeadquartersDashboard FacilityManagement)",
      "Bash(do [ -f \"/home/runner/workspace/client/src/components/$f.tsx\" ])",
      "Bash(done)",
      "Bash(do echo \"=== $f.tsx ===\")",
      "Bash(for f in MonthlyStatistics HeadquartersDashboard FacilityManagement)",
      "Bash(do echo \"=== $f.tsx useQuery count: ===\")",
      "Bash(git checkout -b feature/path-based-multitenancy)",
      "Bash(for file in client/src/components/*.tsx)",
      "Bash(do if git diff --quiet \"$file\")",
      "Bash(git push -u origin feature/path-based-multitenancy)",
      "Bash(git fetch origin)",
      "Bash(then npx drizzle-kit push)",
      "Bash(printf:*)",
      "Bash(node -e:*)",
      "Bash(then psql $DATABASE_URL -c \"SELECT bonus_code, bonus_name, insurance_type, is_active FROM bonus_master ORDER BY insurance_type, display_order LIMIT 20;\")",
      "Bash(then psql $DATABASE_URL -c \"SELECT bonus_code, bonus_name, insurance_type, is_active FROM bonus_master WHERE bonus_code LIKE ''medical_%'' OR bonus_code LIKE ''care_%'' OR bonus_code LIKE ''psychiatric_%'' ORDER BY insurance_type, display_order;\")",
      "Bash(then psql $DATABASE_URL -c \"SELECT id, name, date_of_birth, EXTRACT(YEAR FROM AGE(CURRENT_DATE, date_of_birth)) as age FROM patients ORDER BY date_of_birth DESC LIMIT 10;\")",
      "Bash(then psql $DATABASE_URL -c \"SELECT id, name, address FROM buildings LIMIT 10;\")",
      "Bash(then psql $DATABASE_URL -c \"SELECT id, last_name, first_name, date_of_birth, EXTRACT(YEAR FROM AGE(CURRENT_DATE, date_of_birth)) as age, insurance_type, building_id FROM patients ORDER BY date_of_birth DESC LIMIT 10;\")",
      "Bash(then psql $DATABASE_URL -c \"SELECT id, slug FROM facilities WHERE is_active = true LIMIT 1;\")",
      "Bash(then psql $DATABASE_URL -c \"SELECT id, full_name, role FROM users WHERE facility_id = ''fac-tokyo-main'' AND is_active = true LIMIT 3;\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  f.id as facility_id,\n  f.name as facility_name,\n  f.slug,\n  c.name as company_name\nFROM facilities f\nJOIN companies c ON f.company_id = c.id\nWHERE f.id = ''fac-tokyo-main'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  u.username,\n  u.full_name,\n  u.role,\n  f.name as facility_name,\n  f.slug as facility_slug,\n  c.name as company_name\nFROM users u\nJOIN facilities f ON u.facility_id = f.id\nJOIN companies c ON f.company_id = c.id\nWHERE u.facility_id = ''fac-tokyo-main'' \n  AND u.is_active = true\nORDER BY u.role, u.username\nLIMIT 5;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  f.id as facility_id,\n  f.name as facility_name,\n  f.slug,\n  c.name as company_name\nFROM facilities f\nJOIN companies c ON f.company_id = c.id\nWHERE f.name LIKE ''%テストクリニック%'' OR f.slug LIKE ''%test%''\nORDER BY f.created_at DESC\nLIMIT 5;\n\")",
      "Bash(then psql $DATABASE_URL -c \"SELECT bonus_code, bonus_name, predefined_conditions, can_combine_with, cannot_combine_with FROM bonus_master WHERE bonus_code = ''medical_emergency_visit'';\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  id,\n  visit_date,\n  TO_CHAR(actual_start_time, ''HH24:MI'') as start_time,\n  emergency_visit_reason,\n  calculated_points,\n  applied_bonuses\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-002''\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 5;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  id,\n  visit_date,\n  TO_CHAR(actual_start_time, ''HH24:MI'') as start_time,\n  multiple_visit_reason,\n  calculated_points,\n  applied_bonuses\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-003''\n  AND visit_date = ''2025-10-23''\n  AND deleted_at IS NULL\nORDER BY actual_start_time;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  bonus_code, \n  bonus_name, \n  fixed_points,\n  predefined_conditions,\n  is_active\nFROM bonus_master \nWHERE bonus_code LIKE ''%multiple%'' \n  OR bonus_name LIKE ''%複数%''\nORDER BY bonus_code;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 古い加算マスタを無効化\nUPDATE bonus_master \nSET is_active = false \nWHERE bonus_code IN (''multiple_staff_visit'', ''difficult_disease_multiple_visits'')\nRETURNING bonus_code, bonus_name, is_active;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  id,\n  visit_date,\n  TO_CHAR(actual_start_time, ''HH24:MI'') as start_time,\n  multiple_visit_reason,\n  calculated_points,\n  applied_bonuses\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-003''\n  AND visit_date = ''2025-10-25''\n  AND deleted_at IS NULL\nORDER BY actual_start_time;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  bonus_code,\n  bonus_name,\n  points_type,\n  conditional_pattern,\n  points_config,\n  predefined_conditions,\n  is_active\nFROM bonus_master \nWHERE bonus_code IN (''medical_multiple_visit_2times_1-2'', ''medical_multiple_visit_3times'')\nORDER BY bonus_code;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 10/25の2回目の訪問記録の加算計算履歴を確認\nSELECT \n  bch.id,\n  bm.bonus_code,\n  bm.bonus_name,\n  bch.calculated_points,\n  bch.calculation_details\nFROM bonus_calculation_history bch\nJOIN bonus_master bm ON bch.bonus_master_id = bm.id\nWHERE bch.nursing_record_id = ''4ee331b1-acfb-46a2-9480-96db631dba59''\nORDER BY bch.created_at;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 2回目の訪問記録作成時点で、1回目の訪問記録が存在したか確認\nSELECT \n  COUNT(*) as count_before_2nd_visit\nFROM nursing_records\nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-003''\n  AND visit_date = ''2025-10-25''\n  AND deleted_at IS NULL\n  AND created_at < (\n    SELECT created_at \n    FROM nursing_records \n    WHERE id = ''4ee331b1-acfb-46a2-9480-96db631dba59''\n  );\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  id,\n  patient_number,\n  last_name,\n  first_name,\n  building_id\nFROM patients\nWHERE id = ''test-clinic-patient-003'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- テストクリニック用の建物を作成\nINSERT INTO buildings (\n  id, facility_id, name, address, postal_code\n) VALUES (\n  ''test-clinic-building-001'',\n  ''fac-osaka-branch'',\n  ''テストグループホーム'',\n  ''大阪府大阪市テスト区テスト町1-1-1'',\n  ''530-0001''\n) ON CONFLICT (id) DO NOTHING;\n\n-- テスト次郎に建物を割り当て\nUPDATE patients\nSET building_id = ''test-clinic-building-001''\nWHERE id = ''test-clinic-patient-003'';\n\n-- 確認\nSELECT id, patient_number, last_name, first_name, building_id\nFROM patients\nWHERE id = ''test-clinic-patient-003'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  bonus_code,\n  bonus_name,\n  predefined_conditions,\n  can_combine_with,\n  cannot_combine_with,\n  is_active\nFROM bonus_master \nWHERE bonus_code IN (''medical_multiple_staff_a'', ''psychiatric_multiple_visit_3times'')\nORDER BY bonus_code;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- Phase2予定の加算を無効化（Phase1では未実装）\nUPDATE bonus_master \nSET is_active = false \nWHERE bonus_code IN (\n  ''medical_multiple_staff_a'',\n  ''medical_multiple_staff_b'', \n  ''medical_multiple_staff_c'',\n  ''psychiatric_multiple_visit_2times'',\n  ''psychiatric_multiple_visit_3times''\n)\nRETURNING bonus_code, bonus_name, is_active;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  id,\n  visit_date,\n  TO_CHAR(actual_start_time, ''HH24:MI'') as start_time,\n  multiple_visit_reason,\n  calculated_points,\n  applied_bonuses\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-003''\n  AND visit_date = ''2025-10-29''\n  AND deleted_at IS NULL\nORDER BY actual_start_time;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  id,\n  visit_date,\n  actual_start_time,\n  actual_end_time,\n  TO_CHAR(actual_start_time, ''HH24:MI'') as start_time_formatted,\n  TO_CHAR(actual_start_time AT TIME ZONE ''UTC'', ''HH24:MI (UTC)'') as start_time_utc,\n  TO_CHAR(actual_start_time AT TIME ZONE ''Asia/Tokyo'', ''HH24:MI (JST)'') as start_time_jst,\n  observations,\n  calculated_points,\n  applied_bonuses\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-003''\n  AND observations LIKE ''%テスト13%''\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- すべての加算マスタで、夜間・早朝加算がアクティブか確認\nSELECT \n  bonus_code,\n  bonus_name,\n  points_type,\n  conditional_pattern,\n  points_config,\n  is_active\nFROM bonus_master \nWHERE bonus_code = ''medical_night_early_morning'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  bonus_code,\n  bonus_name,\n  can_combine_with,\n  cannot_combine_with\nFROM bonus_master \nWHERE bonus_code IN (''medical_multiple_visit_2times_1-2'', ''medical_night_early_morning'')\nORDER BY bonus_code;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  id,\n  visit_date,\n  actual_start_time,\n  TO_CHAR(actual_start_time, ''HH24:MI'') as start_time_formatted,\n  TO_CHAR(actual_start_time AT TIME ZONE ''UTC'', ''YYYY-MM-DD HH24:MI:SS TZ'') as start_utc,\n  TO_CHAR(actual_start_time AT TIME ZONE ''Asia/Tokyo'', ''YYYY-MM-DD HH24:MI:SS'') as start_jst,\n  multiple_visit_reason,\n  calculated_points,\n  applied_bonuses\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-003''\n  AND visit_date = ''2025-10-31''\n  AND deleted_at IS NULL\nORDER BY actual_start_time;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  bonus_code,\n  bonus_name,\n  display_order,\n  is_active\nFROM bonus_master \nWHERE insurance_type = ''medical'' \n  AND is_active = true\n  AND (bonus_code LIKE ''medical_%'' OR bonus_code LIKE ''psychiatric_%'')\nORDER BY display_order;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 10/30のテスト花子の夜間訪問（成功）\nSELECT \n  ''SUCCESS'' as result,\n  id,\n  patient_id,\n  visit_date,\n  TO_CHAR(actual_start_time AT TIME ZONE ''Asia/Tokyo'', ''HH24:MI'') as jst_time,\n  multiple_visit_reason,\n  calculated_points,\n  jsonb_array_length(applied_bonuses::jsonb) as bonus_count\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-002''\n  AND visit_date = ''2025-10-30''\n  AND deleted_at IS NULL\n\nUNION ALL\n\n-- 10/31のテスト次郎の夜間訪問（失敗）\nSELECT \n  ''FAILED'' as result,\n  id,\n  patient_id,\n  visit_date,\n  TO_CHAR(actual_start_time AT TIME ZONE ''Asia/Tokyo'', ''HH24:MI'') as jst_time,\n  multiple_visit_reason,\n  calculated_points,\n  jsonb_array_length(applied_bonuses::jsonb) as bonus_count\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND patient_id = ''test-clinic-patient-003''\n  AND visit_date = ''2025-10-31''\n  AND multiple_visit_reason IS NOT NULL\n  AND deleted_at IS NULL\nORDER BY result, visit_date;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 夜間・早朝加算の canCombineWith を修正\n-- null にすることで、cannotCombineWith のみで制御する\nUPDATE bonus_master\nSET can_combine_with = NULL\nWHERE bonus_code = ''medical_night_early_morning'';\n\n-- 確認\nSELECT \n  bonus_code,\n  bonus_name,\n  can_combine_with,\n  cannot_combine_with\nFROM bonus_master\nWHERE bonus_code = ''medical_night_early_morning'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\nSELECT \n  bonus_code,\n  bonus_name,\n  insurance_type,\n  is_active,\n  display_order\nFROM bonus_master \nORDER BY insurance_type, display_order;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- Phase1テスト中に無効化した不要な加算マスタを削除\nDELETE FROM bonus_master \nWHERE bonus_code IN (\n  ''difficult_disease_multiple_visits'',  -- 古い複数回訪問加算（Phase1で再実装済み）\n  ''multiple_staff_visit'',               -- 古い複数名訪問加算（Phase1で再実装済み）\n  ''medical_multiple_staff_a'',           -- Phase2予定（まだ実装されていない）\n  ''medical_multiple_staff_b'',           -- Phase2予定（まだ実装されていない）\n  ''medical_multiple_staff_c'',           -- Phase2予定（まだ実装されていない）\n  ''psychiatric_multiple_visit_2times'',  -- Phase2予定（まだ実装されていない）\n  ''psychiatric_multiple_visit_3times''   -- Phase2予定（まだ実装されていない）\n)\nRETURNING bonus_code, bonus_name, is_active;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- まず削除対象の加算マスタIDを取得して計算履歴を削除\nWITH target_bonuses AS (\n  SELECT id, bonus_code, bonus_name \n  FROM bonus_master \n  WHERE bonus_code IN (\n    ''difficult_disease_multiple_visits'',\n    ''multiple_staff_visit'',\n    ''medical_multiple_staff_a'',\n    ''medical_multiple_staff_b'',\n    ''medical_multiple_staff_c'',\n    ''psychiatric_multiple_visit_2times'',\n    ''psychiatric_multiple_visit_3times''\n  )\n)\nDELETE FROM bonus_calculation_history \nWHERE bonus_master_id IN (SELECT id FROM target_bonuses)\nRETURNING (SELECT bonus_code FROM target_bonuses WHERE id = bonus_master_id) as deleted_bonus;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 不要な加算マスタを削除\nDELETE FROM bonus_master \nWHERE bonus_code IN (\n  ''difficult_disease_multiple_visits'',\n  ''multiple_staff_visit'',\n  ''medical_multiple_staff_a'',\n  ''medical_multiple_staff_b'',\n  ''medical_multiple_staff_c'',\n  ''psychiatric_multiple_visit_2times'',\n  ''psychiatric_multiple_visit_3times''\n)\nRETURNING bonus_code, bonus_name, is_active;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- Phase1実装済みの加算マスタを確認\nSELECT \n  bonus_code,\n  bonus_name,\n  insurance_type,\n  is_active\nFROM bonus_master \nWHERE is_active = true\n  AND (\n    bonus_code LIKE ''medical_%'' \n    OR bonus_code LIKE ''care_%''\n    OR bonus_code LIKE ''psychiatric_%''\n  )\n  AND display_order >= 10  -- Phase1実装分のみ（display_order 10以上）\nORDER BY insurance_type, display_order;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 加算マスタの統計情報\nSELECT \n  insurance_type as 保険種別,\n  COUNT(*) as 総数,\n  SUM(CASE WHEN is_active THEN 1 ELSE 0 END) as アクティブ数,\n  SUM(CASE WHEN NOT is_active THEN 1 ELSE 0 END) as 非アクティブ数\nFROM bonus_master\nGROUP BY insurance_type\nORDER BY insurance_type;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- Phase2設計書に記載された20項目の加算がデータベースに存在するか確認\nSELECT \n  bonus_code,\n  bonus_name,\n  insurance_type,\n  points_type,\n  is_active,\n  predefined_conditions\nFROM bonus_master \nWHERE bonus_code IN (\n  -- 施設体制フラグ系（4項目）\n  ''24h_response_system_basic'', ''medical_24h_support_basic'',\n  ''24h_response_system_enhanced'', ''medical_24h_support_enhanced'',\n  ''care_emergency_system'',\n  ''care_emergency_system_2'',\n  \n  -- 患者状態・記録系（8項目）\n  ''discharge_joint_guidance'', ''medical_discharge_joint_guidance'',\n  ''discharge_support_guidance_basic'', ''medical_discharge_support_basic'',\n  ''discharge_support_guidance_long'', ''medical_discharge_support_long'',\n  ''home_coordination_guidance'', ''medical_home_coordination'',\n  ''home_patient_emergency_conference'', ''medical_emergency_conference'',\n  ''psychiatric_severe_patient_support_5800'', ''psychiatric_support_5800'',\n  ''psychiatric_severe_patient_support_8400'', ''psychiatric_support_8400'',\n  ''nursing_care_staff_collaboration'', ''medical_nursing_care_collaboration'',\n  \n  -- 看護師資格・研修系（3項目）\n  ''specialist_management'', ''medical_specialist_management'',\n  ''care_specialist_management'',\n  ''care_remote_death_diagnosis'', ''medical_remote_death_diagnosis'',\n  \n  -- 初回訪問・新規計画系（2項目）\n  ''care_initial_visit_1'',\n  ''care_initial_visit_2'',\n  \n  -- 複雑な時間・回数判定系（3項目）\n  ''care_long_visit'',\n  ''care_multiple_staff_1'',\n  ''care_multiple_staff_2'',\n  ''care_service_system_1'',\n  ''care_service_system_2''\n)\nORDER BY insurance_type, bonus_code;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- Phase2-1テスト用: 大阪支店に施設体制フラグを設定\nUPDATE facilities\nSET \n  has_24h_support_system = true,\n  has_24h_support_system_enhanced = true,\n  has_emergency_support_system = true,\n  has_emergency_support_system_enhanced = true,\n  burden_reduction_measures = ''[\"\"夜間対応翌日の勤務間隔確保\"\", \"\"夜間対応の連続回数制限\"\", \"\"ICT・AI・IoT等の活用\"\"]''::jsonb\nWHERE id = ''fac-osaka-branch'';\n\n-- 確認\nSELECT \n  id,\n  name,\n  has_24h_support_system,\n  has_24h_support_system_enhanced,\n  has_emergency_support_system,\n  has_emergency_support_system_enhanced,\n  burden_reduction_measures\nFROM facilities\nWHERE id = ''fac-osaka-branch'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- テスト患者の確認\nSELECT \n  id,\n  patient_number,\n  last_name,\n  first_name,\n  EXTRACT(YEAR FROM AGE(CURRENT_DATE, date_of_birth)) as age,\n  insurance_type,\n  building_id\nFROM patients\nWHERE id IN (''test-clinic-patient-002'', ''test-clinic-patient-003'')\nORDER BY patient_number;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- テスト次郎を介護保険に変更\nUPDATE patients\nSET insurance_type = ''care''\nWHERE id = ''test-clinic-patient-003'';\n\n-- 確認\nSELECT \n  id,\n  patient_number,\n  last_name,\n  first_name,\n  insurance_type\nFROM patients\nWHERE id = ''test-clinic-patient-003'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- Phase2-1加算マスタの最終確認\nSELECT \n  bonus_code,\n  bonus_name,\n  insurance_type,\n  fixed_points,\n  is_active,\n  CASE \n    WHEN predefined_conditions IS NULL THEN ''条件なし''\n    WHEN jsonb_array_length(predefined_conditions::jsonb) = 0 THEN ''空配列''\n    ELSE predefined_conditions::text\n  END as conditions\nFROM bonus_master\nWHERE bonus_code IN (\n  ''24h_response_system_basic'',\n  ''24h_response_system_enhanced'',\n  ''care_emergency_system'',\n  ''care_emergency_system_2''\n)\nORDER BY insurance_type, bonus_code;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- care_emergency_system の重複を確認\nSELECT \n  id,\n  bonus_code,\n  bonus_name,\n  fixed_points,\n  display_order\nFROM bonus_master\nWHERE bonus_code = ''care_emergency_system''\nORDER BY display_order;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 古い care_emergency_system を削除（display_order=0のもの）\nDELETE FROM bonus_master\nWHERE bonus_code = ''care_emergency_system''\n  AND display_order = 0\nRETURNING bonus_code, bonus_name, fixed_points;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- テストクリニックの施設情報を確認\nSELECT \n  f.id,\n  f.name,\n  f.slug,\n  c.name as company_name\nFROM facilities f\nJOIN companies c ON f.company_id = c.id\nWHERE f.id = ''fac-osaka-branch'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- この施設で使用可能なアカウントを確認\nSELECT \n  username,\n  full_name,\n  role,\n  is_active\nFROM users\nWHERE facility_id = ''fac-osaka-branch'' \n  AND is_active = true\nORDER BY username;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 24時間対応体制加算（基本）: 看護業務負担軽減版とは併算定不可\nUPDATE bonus_master\nSET cannot_combine_with = ARRAY[''24h_response_system_enhanced'']\nWHERE bonus_code = ''24h_response_system_basic'';\n\n-- 24時間対応体制加算（看護業務負担軽減）: 基本版とは併算定不可\nUPDATE bonus_master\nSET cannot_combine_with = ARRAY[''24h_response_system_basic'']\nWHERE bonus_code = ''24h_response_system_enhanced'';\n\n-- 緊急時訪問看護加算（I）: （II）とは併算定不可\nUPDATE bonus_master\nSET cannot_combine_with = ARRAY[''care_emergency_system_2'']\nWHERE bonus_code = ''care_emergency_system'';\n\n-- 緊急時訪問看護加算（II）: （I）とは併算定不可\nUPDATE bonus_master\nSET cannot_combine_with = ARRAY[''care_emergency_system'']\nWHERE bonus_code = ''care_emergency_system_2'';\n\n-- 確認\nSELECT \n  bonus_code,\n  bonus_name,\n  cannot_combine_with\nFROM bonus_master\nWHERE bonus_code IN (\n  ''24h_response_system_basic'',\n  ''24h_response_system_enhanced'',\n  ''care_emergency_system'',\n  ''care_emergency_system_2''\n)\nORDER BY bonus_code;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- Phase2-1加算マスタの条件と点数を確認\nSELECT \n  bonus_code,\n  bonus_name,\n  fixed_points,\n  is_active,\n  predefined_conditions,\n  cannot_combine_with\nFROM bonus_master\nWHERE bonus_code IN (\n  ''24h_response_system_basic'',\n  ''24h_response_system_enhanced''\n)\nORDER BY fixed_points DESC;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 施設の設定を再確認\nSELECT \n  id,\n  name,\n  has_24h_support_system,\n  has_24h_support_system_enhanced,\n  burden_reduction_measures,\n  jsonb_array_length(burden_reduction_measures::jsonb) as measures_count\nFROM facilities\nWHERE id = ''fac-osaka-branch'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- テスト1の訪問記録を確認\nSELECT \n  id,\n  visit_date,\n  observations,\n  calculated_points,\n  applied_bonuses\nFROM nursing_records \nWHERE facility_id = ''fac-osaka-branch''\n  AND observations LIKE ''%Phase2-1テスト1%''\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- 最新のテスト記録で実際にどちらが適用されたか確認\nSELECT \n  id,\n  visit_date,\n  observations,\n  calculated_points,\n  applied_bonuses\nFROM nursing_records \nWHERE id = ''8fc7805a-425e-4cc4-84e8-bd7bf1072a4e'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- テストクリニックの企業で本社管理者を探す\nSELECT \n  u.username,\n  u.full_name,\n  u.role,\n  u.access_level,\n  f.name as facility_name,\n  f.is_headquarters,\n  c.name as company_name\nFROM users u\nJOIN facilities f ON u.facility_id = f.id\nJOIN companies c ON f.company_id = c.id\nWHERE c.id = (\n  SELECT company_id FROM facilities WHERE id = ''fac-osaka-branch''\n)\nAND u.is_active = true\nAND (u.role = ''corporate_admin'' OR (f.is_headquarters = true AND u.role IN (''admin'', ''manager'')))\nORDER BY u.role, u.username;\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- testuser1を一時的に本社管理者に変更（テスト用）\nUPDATE users\nSET \n  role = ''corporate_admin'',\n  access_level = ''corporate'',\n  facility_id = (SELECT id FROM facilities WHERE is_headquarters = true AND company_id = (SELECT company_id FROM facilities WHERE id = ''fac-osaka-branch'') LIMIT 1)\nWHERE username = ''testuser1'';\n\n-- 確認\nSELECT \n  username,\n  full_name,\n  role,\n  access_level,\n  facility_id\nFROM users\nWHERE username = ''testuser1'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"\n-- テストクリニックの現在の設定を確認\nSELECT \n  id,\n  name,\n  has_24h_support_system,\n  has_24h_support_system_enhanced,\n  has_emergency_support_system,\n  has_emergency_support_system_enhanced,\n  burden_reduction_measures\nFROM facilities\nWHERE id = ''fac-osaka-branch'';\n\")",
      "Bash(then psql $DATABASE_URL -c \"SELECT id, username, full_name, role, facility_id, access_level, is_active FROM users WHERE username = ''testuser1'';\")",
      "Bash(then psql $DATABASE_URL -c \"\nUPDATE users\nSET \n  role = ''nurse'',\n  access_level = ''facility'',\n  facility_id = ''fac-osaka-branch''\nWHERE username = ''testuser1'';\n\n-- 確認\nSELECT \n  username,\n  full_name,\n  role,\n  access_level,\n  f.name as facility_name\nFROM users u\nJOIN facilities f ON u.facility_id = f.id\nWHERE username = ''testuser1'';\n\")",
      "Bash(git restore:*)"
    ],
    "deny": [],
    "ask": []
  }
}
